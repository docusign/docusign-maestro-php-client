<?php
/**
 * ESignTabsRecord
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Maestro\Model;

use \ArrayAccess;
use DocuSign\Maestro\ObjectSerializer;

/**
 * ESignTabsRecord Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Maestro
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ESignTabsRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ESignTabsRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_signed_tabs' => '\DocuSign\Maestro\Model\ESignTabs[]',
        'email_address_tabs' => '\DocuSign\Maestro\Model\ESignTabs[]',
        'first_name_tabs' => '\DocuSign\Maestro\Model\ESignTabs[]',
        'full_name_tabs' => '\DocuSign\Maestro\Model\ESignTabs[]',
        'last_name_tabs' => '\DocuSign\Maestro\Model\ESignTabs[]',
        'sign_here_tabs' => '\DocuSign\Maestro\Model\ESignTabs[]',
        'text_tabs' => '\DocuSign\Maestro\Model\ESignTabs[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_signed_tabs' => null,
        'email_address_tabs' => null,
        'first_name_tabs' => null,
        'full_name_tabs' => null,
        'last_name_tabs' => null,
        'sign_here_tabs' => null,
        'text_tabs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_signed_tabs' => 'dateSignedTabs',
        'email_address_tabs' => 'emailAddressTabs',
        'first_name_tabs' => 'firstNameTabs',
        'full_name_tabs' => 'fullNameTabs',
        'last_name_tabs' => 'lastNameTabs',
        'sign_here_tabs' => 'signHereTabs',
        'text_tabs' => 'textTabs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_signed_tabs' => 'setDateSignedTabs',
        'email_address_tabs' => 'setEmailAddressTabs',
        'first_name_tabs' => 'setFirstNameTabs',
        'full_name_tabs' => 'setFullNameTabs',
        'last_name_tabs' => 'setLastNameTabs',
        'sign_here_tabs' => 'setSignHereTabs',
        'text_tabs' => 'setTextTabs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_signed_tabs' => 'getDateSignedTabs',
        'email_address_tabs' => 'getEmailAddressTabs',
        'first_name_tabs' => 'getFirstNameTabs',
        'full_name_tabs' => 'getFullNameTabs',
        'last_name_tabs' => 'getLastNameTabs',
        'sign_here_tabs' => 'getSignHereTabs',
        'text_tabs' => 'getTextTabs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_signed_tabs'] = isset($data['date_signed_tabs']) ? $data['date_signed_tabs'] : null;
        $this->container['email_address_tabs'] = isset($data['email_address_tabs']) ? $data['email_address_tabs'] : null;
        $this->container['first_name_tabs'] = isset($data['first_name_tabs']) ? $data['first_name_tabs'] : null;
        $this->container['full_name_tabs'] = isset($data['full_name_tabs']) ? $data['full_name_tabs'] : null;
        $this->container['last_name_tabs'] = isset($data['last_name_tabs']) ? $data['last_name_tabs'] : null;
        $this->container['sign_here_tabs'] = isset($data['sign_here_tabs']) ? $data['sign_here_tabs'] : null;
        $this->container['text_tabs'] = isset($data['text_tabs']) ? $data['text_tabs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_signed_tabs
     *
     * @return \DocuSign\Maestro\Model\ESignTabs[]
     */
    public function getDateSignedTabs()
    {
        return $this->container['date_signed_tabs'];
    }

    /**
     * Sets date_signed_tabs
     *
     * @param \DocuSign\Maestro\Model\ESignTabs[] $date_signed_tabs date_signed_tabs
     *
     * @return $this
     */
    public function setDateSignedTabs($date_signed_tabs)
    {
        $this->container['date_signed_tabs'] = $date_signed_tabs;

        return $this;
    }

    /**
     * Gets email_address_tabs
     *
     * @return \DocuSign\Maestro\Model\ESignTabs[]
     */
    public function getEmailAddressTabs()
    {
        return $this->container['email_address_tabs'];
    }

    /**
     * Sets email_address_tabs
     *
     * @param \DocuSign\Maestro\Model\ESignTabs[] $email_address_tabs email_address_tabs
     *
     * @return $this
     */
    public function setEmailAddressTabs($email_address_tabs)
    {
        $this->container['email_address_tabs'] = $email_address_tabs;

        return $this;
    }

    /**
     * Gets first_name_tabs
     *
     * @return \DocuSign\Maestro\Model\ESignTabs[]
     */
    public function getFirstNameTabs()
    {
        return $this->container['first_name_tabs'];
    }

    /**
     * Sets first_name_tabs
     *
     * @param \DocuSign\Maestro\Model\ESignTabs[] $first_name_tabs first_name_tabs
     *
     * @return $this
     */
    public function setFirstNameTabs($first_name_tabs)
    {
        $this->container['first_name_tabs'] = $first_name_tabs;

        return $this;
    }

    /**
     * Gets full_name_tabs
     *
     * @return \DocuSign\Maestro\Model\ESignTabs[]
     */
    public function getFullNameTabs()
    {
        return $this->container['full_name_tabs'];
    }

    /**
     * Sets full_name_tabs
     *
     * @param \DocuSign\Maestro\Model\ESignTabs[] $full_name_tabs full_name_tabs
     *
     * @return $this
     */
    public function setFullNameTabs($full_name_tabs)
    {
        $this->container['full_name_tabs'] = $full_name_tabs;

        return $this;
    }

    /**
     * Gets last_name_tabs
     *
     * @return \DocuSign\Maestro\Model\ESignTabs[]
     */
    public function getLastNameTabs()
    {
        return $this->container['last_name_tabs'];
    }

    /**
     * Sets last_name_tabs
     *
     * @param \DocuSign\Maestro\Model\ESignTabs[] $last_name_tabs last_name_tabs
     *
     * @return $this
     */
    public function setLastNameTabs($last_name_tabs)
    {
        $this->container['last_name_tabs'] = $last_name_tabs;

        return $this;
    }

    /**
     * Gets sign_here_tabs
     *
     * @return \DocuSign\Maestro\Model\ESignTabs[]
     */
    public function getSignHereTabs()
    {
        return $this->container['sign_here_tabs'];
    }

    /**
     * Sets sign_here_tabs
     *
     * @param \DocuSign\Maestro\Model\ESignTabs[] $sign_here_tabs sign_here_tabs
     *
     * @return $this
     */
    public function setSignHereTabs($sign_here_tabs)
    {
        $this->container['sign_here_tabs'] = $sign_here_tabs;

        return $this;
    }

    /**
     * Gets text_tabs
     *
     * @return \DocuSign\Maestro\Model\ESignTabs[]
     */
    public function getTextTabs()
    {
        return $this->container['text_tabs'];
    }

    /**
     * Sets text_tabs
     *
     * @param \DocuSign\Maestro\Model\ESignTabs[] $text_tabs text_tabs
     *
     * @return $this
     */
    public function setTextTabs($text_tabs)
    {
        $this->container['text_tabs'] = $text_tabs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

