<?php
/**
 * DSWorkflowComparisonExpression
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Maestro\Model;

use \ArrayAccess;
use DocuSign\Maestro\ObjectSerializer;

/**
 * DSWorkflowComparisonExpression Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Maestro
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DSWorkflowComparisonExpression implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DSWorkflowComparisonExpression';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comparison_operator' => '\DocuSign\Maestro\Model\DSWorkflowComparisonOperatorTypes',
        'left_operand' => 'object',
        'right_operand' => 'object',
        'type' => '\DocuSign\Maestro\Model\DSWorkflowExpressionTypesComparisonExpression'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comparison_operator' => null,
        'left_operand' => null,
        'right_operand' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comparison_operator' => 'comparisonOperator',
        'left_operand' => 'leftOperand',
        'right_operand' => 'rightOperand',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comparison_operator' => 'setComparisonOperator',
        'left_operand' => 'setLeftOperand',
        'right_operand' => 'setRightOperand',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comparison_operator' => 'getComparisonOperator',
        'left_operand' => 'getLeftOperand',
        'right_operand' => 'getRightOperand',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comparison_operator'] = isset($data['comparison_operator']) ? $data['comparison_operator'] : null;
        $this->container['left_operand'] = isset($data['left_operand']) ? $data['left_operand'] : null;
        $this->container['right_operand'] = isset($data['right_operand']) ? $data['right_operand'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['comparison_operator'] === null) {
            $invalidProperties[] = "'comparison_operator' can't be null";
        }
        if ($this->container['left_operand'] === null) {
            $invalidProperties[] = "'left_operand' can't be null";
        }
        if ($this->container['right_operand'] === null) {
            $invalidProperties[] = "'right_operand' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comparison_operator
     *
     * @return \DocuSign\Maestro\Model\DSWorkflowComparisonOperatorTypes
     */
    public function getComparisonOperator()
    {
        return $this->container['comparison_operator'];
    }

    /**
     * Sets comparison_operator
     *
     * @param \DocuSign\Maestro\Model\DSWorkflowComparisonOperatorTypes $comparison_operator comparison_operator
     *
     * @return $this
     */
    public function setComparisonOperator($comparison_operator)
    {
        $this->container['comparison_operator'] = $comparison_operator;

        return $this;
    }

    /**
     * Gets left_operand
     *
     * @return object
     */
    public function getLeftOperand()
    {
        return $this->container['left_operand'];
    }

    /**
     * Sets left_operand
     *
     * @param object $left_operand This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]
     *
     * @return $this
     */
    public function setLeftOperand($left_operand)
    {
        $this->container['left_operand'] = $left_operand;

        return $this;
    }

    /**
     * Gets right_operand
     *
     * @return object
     */
    public function getRightOperand()
    {
        return $this->container['right_operand'];
    }

    /**
     * Sets right_operand
     *
     * @param object $right_operand This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]
     *
     * @return $this
     */
    public function setRightOperand($right_operand)
    {
        $this->container['right_operand'] = $right_operand;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \DocuSign\Maestro\Model\DSWorkflowExpressionTypesComparisonExpression
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \DocuSign\Maestro\Model\DSWorkflowExpressionTypesComparisonExpression $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

