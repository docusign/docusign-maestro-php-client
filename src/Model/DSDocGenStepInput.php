<?php
/**
 * DSDocGenStepInput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Maestro\Model;

use \ArrayAccess;
use DocuSign\Maestro\ObjectSerializer;

/**
 * DSDocGenStepInput Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Maestro
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DSDocGenStepInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DSDocGenStep_input';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'data_json' => '\DocuSign\Maestro\Model\RecordStringOrVariableOrTransformation',
        'output_file_name' => 'object',
        'output_file_name_is_unique' => '?bool',
        'output_format' => '\DocuSign\Maestro\Model\DSWorkflowDocGenDocOutputFormat',
        'template_id' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'data_json' => null,
        'output_file_name' => null,
        'output_file_name_is_unique' => null,
        'output_format' => null,
        'template_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_json' => 'dataJson',
        'output_file_name' => 'outputFileName',
        'output_file_name_is_unique' => 'outputFileNameIsUnique',
        'output_format' => 'outputFormat',
        'template_id' => 'templateId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_json' => 'setDataJson',
        'output_file_name' => 'setOutputFileName',
        'output_file_name_is_unique' => 'setOutputFileNameIsUnique',
        'output_format' => 'setOutputFormat',
        'template_id' => 'setTemplateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_json' => 'getDataJson',
        'output_file_name' => 'getOutputFileName',
        'output_file_name_is_unique' => 'getOutputFileNameIsUnique',
        'output_format' => 'getOutputFormat',
        'template_id' => 'getTemplateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_json'] = isset($data['data_json']) ? $data['data_json'] : null;
        $this->container['output_file_name'] = isset($data['output_file_name']) ? $data['output_file_name'] : null;
        $this->container['output_file_name_is_unique'] = isset($data['output_file_name_is_unique']) ? $data['output_file_name_is_unique'] : null;
        $this->container['output_format'] = isset($data['output_format']) ? $data['output_format'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['data_json'] === null) {
            $invalidProperties[] = "'data_json' can't be null";
        }
        if ($this->container['output_file_name'] === null) {
            $invalidProperties[] = "'output_file_name' can't be null";
        }
        if ($this->container['output_file_name_is_unique'] === null) {
            $invalidProperties[] = "'output_file_name_is_unique' can't be null";
        }
        if ($this->container['output_format'] === null) {
            $invalidProperties[] = "'output_format' can't be null";
        }
        if ($this->container['template_id'] === null) {
            $invalidProperties[] = "'template_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_json
     *
     * @return \DocuSign\Maestro\Model\RecordStringOrVariableOrTransformation
     */
    public function getDataJson()
    {
        return $this->container['data_json'];
    }

    /**
     * Sets data_json
     *
     * @param \DocuSign\Maestro\Model\RecordStringOrVariableOrTransformation $data_json data_json
     *
     * @return $this
     */
    public function setDataJson($data_json)
    {
        $this->container['data_json'] = $data_json;

        return $this;
    }

    /**
     * Gets output_file_name
     *
     * @return object
     */
    public function getOutputFileName()
    {
        return $this->container['output_file_name'];
    }

    /**
     * Sets output_file_name
     *
     * @param object $output_file_name Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
     *
     * @return $this
     */
    public function setOutputFileName($output_file_name)
    {
        $this->container['output_file_name'] = $output_file_name;

        return $this;
    }

    /**
     * Gets output_file_name_is_unique
     *
     * @return ?bool
     */
    public function getOutputFileNameIsUnique()
    {
        return $this->container['output_file_name_is_unique'];
    }

    /**
     * Sets output_file_name_is_unique
     *
     * @param ?bool $output_file_name_is_unique output_file_name_is_unique
     *
     * @return $this
     */
    public function setOutputFileNameIsUnique($output_file_name_is_unique)
    {
        $this->container['output_file_name_is_unique'] = $output_file_name_is_unique;

        return $this;
    }

    /**
     * Gets output_format
     *
     * @return \DocuSign\Maestro\Model\DSWorkflowDocGenDocOutputFormat
     */
    public function getOutputFormat()
    {
        return $this->container['output_format'];
    }

    /**
     * Sets output_format
     *
     * @param \DocuSign\Maestro\Model\DSWorkflowDocGenDocOutputFormat $output_format output_format
     *
     * @return $this
     */
    public function setOutputFormat($output_format)
    {
        $this->container['output_format'] = $output_format;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return object
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param object $template_id Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

