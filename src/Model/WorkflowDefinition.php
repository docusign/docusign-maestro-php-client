<?php
/**
 * WorkflowDefinition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Maestro\Model;

use \ArrayAccess;
use DocuSign\Maestro\ObjectSerializer;

/**
 * WorkflowDefinition Class Doc Comment
 *
 * @category    Class
 * @description A DS workflow definition.
 * @package     DocuSign\Maestro
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WorkflowDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkflowDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => '?string',
        'created_by_name' => '?string',
        'document_version' => '?string',
        'participants' => 'map[string,\DocuSign\Maestro\Model\Participant]',
        'schema_version' => '?string',
        'steps' => 'object[]',
        'trigger' => '\DocuSign\Maestro\Model\DSWorkflowTrigger',
        'variables' => 'map[string,object]',
        'workflow_description' => '?string',
        'workflow_name' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'created_by_name' => null,
        'document_version' => null,
        'participants' => null,
        'schema_version' => null,
        'steps' => null,
        'trigger' => null,
        'variables' => null,
        'workflow_description' => null,
        'workflow_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'created_by_name' => 'createdByName',
        'document_version' => 'documentVersion',
        'participants' => 'participants',
        'schema_version' => 'schemaVersion',
        'steps' => 'steps',
        'trigger' => 'trigger',
        'variables' => 'variables',
        'workflow_description' => 'workflowDescription',
        'workflow_name' => 'workflowName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'created_by_name' => 'setCreatedByName',
        'document_version' => 'setDocumentVersion',
        'participants' => 'setParticipants',
        'schema_version' => 'setSchemaVersion',
        'steps' => 'setSteps',
        'trigger' => 'setTrigger',
        'variables' => 'setVariables',
        'workflow_description' => 'setWorkflowDescription',
        'workflow_name' => 'setWorkflowName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'created_by_name' => 'getCreatedByName',
        'document_version' => 'getDocumentVersion',
        'participants' => 'getParticipants',
        'schema_version' => 'getSchemaVersion',
        'steps' => 'getSteps',
        'trigger' => 'getTrigger',
        'variables' => 'getVariables',
        'workflow_description' => 'getWorkflowDescription',
        'workflow_name' => 'getWorkflowName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['created_by_name'] = isset($data['created_by_name']) ? $data['created_by_name'] : null;
        $this->container['document_version'] = isset($data['document_version']) ? $data['document_version'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['schema_version'] = isset($data['schema_version']) ? $data['schema_version'] : null;
        $this->container['steps'] = isset($data['steps']) ? $data['steps'] : null;
        $this->container['trigger'] = isset($data['trigger']) ? $data['trigger'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['workflow_description'] = isset($data['workflow_description']) ? $data['workflow_description'] : null;
        $this->container['workflow_name'] = isset($data['workflow_name']) ? $data['workflow_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['document_version'] === null) {
            $invalidProperties[] = "'document_version' can't be null";
        }
        if ($this->container['schema_version'] === null) {
            $invalidProperties[] = "'schema_version' can't be null";
        }
        if ($this->container['steps'] === null) {
            $invalidProperties[] = "'steps' can't be null";
        }
        if ($this->container['trigger'] === null) {
            $invalidProperties[] = "'trigger' can't be null";
        }
        if ($this->container['variables'] === null) {
            $invalidProperties[] = "'variables' can't be null";
        }
        if ($this->container['workflow_description'] === null) {
            $invalidProperties[] = "'workflow_description' can't be null";
        }
        if ($this->container['workflow_name'] === null) {
            $invalidProperties[] = "'workflow_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return ?string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param ?string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets created_by_name
     *
     * @return ?string
     */
    public function getCreatedByName()
    {
        return $this->container['created_by_name'];
    }

    /**
     * Sets created_by_name
     *
     * @param ?string $created_by_name The name of the user who created this workflow definition
     *
     * @return $this
     */
    public function setCreatedByName($created_by_name)
    {
        $this->container['created_by_name'] = $created_by_name;

        return $this;
    }

    /**
     * Gets document_version
     *
     * @return ?string
     */
    public function getDocumentVersion()
    {
        return $this->container['document_version'];
    }

    /**
     * Sets document_version
     *
     * @param ?string $document_version document_version
     *
     * @return $this
     */
    public function setDocumentVersion($document_version)
    {
        $this->container['document_version'] = $document_version;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return map[string,\DocuSign\Maestro\Model\Participant]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param map[string,\DocuSign\Maestro\Model\Participant] $participants A DS Workflow participant record
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets schema_version
     *
     * @return ?string
     */
    public function getSchemaVersion()
    {
        return $this->container['schema_version'];
    }

    /**
     * Sets schema_version
     *
     * @param ?string $schema_version schema_version
     *
     * @return $this
     */
    public function setSchemaVersion($schema_version)
    {
        $this->container['schema_version'] = $schema_version;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return object[]
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param object[] $steps A list of #/definitions/DSWorkflowStep. Each element is: A DS Workflow Step. This object should be any of the following object models: [#/definitions/DSServiceStep, #/definitions/DSTransformationStep, #/definitions/DSDocGenStep, #/definitions/DSSignStep]
     *
     * @return $this
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets trigger
     *
     * @return \DocuSign\Maestro\Model\DSWorkflowTrigger
     */
    public function getTrigger()
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     *
     * @param \DocuSign\Maestro\Model\DSWorkflowTrigger $trigger trigger
     *
     * @return $this
     */
    public function setTrigger($trigger)
    {
        $this->container['trigger'] = $trigger;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return map[string,object]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param map[string,object] $variables A DS Workflow variable record
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets workflow_description
     *
     * @return ?string
     */
    public function getWorkflowDescription()
    {
        return $this->container['workflow_description'];
    }

    /**
     * Sets workflow_description
     *
     * @param ?string $workflow_description workflow_description
     *
     * @return $this
     */
    public function setWorkflowDescription($workflow_description)
    {
        $this->container['workflow_description'] = $workflow_description;

        return $this;
    }

    /**
     * Gets workflow_name
     *
     * @return ?string
     */
    public function getWorkflowName()
    {
        return $this->container['workflow_name'];
    }

    /**
     * Sets workflow_name
     *
     * @param ?string $workflow_name workflow_name
     *
     * @return $this
     */
    public function setWorkflowName($workflow_name)
    {
        $this->container['workflow_name'] = $workflow_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

