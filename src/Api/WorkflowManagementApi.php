<?php
declare(strict_types=1);

/**
 * WorkflowManagementApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Maestro\Api\WorkflowManagementApi;


/**
 * GetWorkflowDefinitionOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetWorkflowDefinitionOptions
{
    /**
      * $last_deployed_id deployed workflow definition metadata object id
      * @var ?string
      */
    protected ?string $last_deployed_id = null;

    /**
     * Gets last_deployed_id
     *
     * @return ?string
     */
    public function getLastDeployedId(): ?string
    {
        return $this->last_deployed_id;
    }

    /**
     * Sets last_deployed_id
     * @param ?string $last_deployed_id deployed workflow definition metadata object id
     *
     * @return self
     */
    public function setLastDeployedId(?string $last_deployed_id): self
    {
        $this->last_deployed_id = $last_deployed_id;
        return $this;
    }
}


/**
 * GetWorkflowDefinitionsOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetWorkflowDefinitionsOptions
{
    /**
      * $status workflow definition metadata status
      * @var ?string
      */
    protected ?string $status = null;

    /**
     * Gets status
     *
     * @return ?string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets status
     * @param ?string $status workflow definition metadata status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;
        return $this;
    }
}



namespace DocuSign\Maestro\Api;

use DocuSign\Maestro\Client\ApiClient;
use DocuSign\Maestro\Client\ApiException;
use DocuSign\Maestro\Configuration;
use DocuSign\Maestro\ObjectSerializer;

/**
 * WorkflowManagementApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkflowManagementApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation createWorkflowDefinition
     *
     * Creates a new workflow definition.
     *
     * @param ?string $account_id Account ID
     * @param \DocuSign\Maestro\Model\CreateOrUpdateWorkflowDefinitionRequestBody $body Request Body to create a new workflow definition. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse
     */
    public function createWorkflowDefinition($account_id, $body)
    {
        list($response) = $this->createWorkflowDefinitionWithHttpInfo($account_id, $body);
        return $response;
    }

    /**
     * Operation createWorkflowDefinitionWithHttpInfo
     *
     * Creates a new workflow definition.
     *
     * @param ?string $account_id Account ID
     * @param \DocuSign\Maestro\Model\CreateOrUpdateWorkflowDefinitionRequestBody $body Request Body to create a new workflow definition. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkflowDefinitionWithHttpInfo($account_id, $body): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createWorkflowDefinition');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkflowDefinition');
        }
        // parse inputs
        $resourcePath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse',
                'aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkflowDefinition
     *
     * Deletes a workflow definition.
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\WorkflowDeleteResponse
     */
    public function deleteWorkflowDefinition($account_id, $workflow_definition_id)
    {
        list($response) = $this->deleteWorkflowDefinitionWithHttpInfo($account_id, $workflow_definition_id);
        return $response;
    }

    /**
     * Operation deleteWorkflowDefinitionWithHttpInfo
     *
     * Deletes a workflow definition.
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\WorkflowDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkflowDefinitionWithHttpInfo($account_id, $workflow_definition_id): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteWorkflowDefinition');
        }
        // verify the required parameter 'workflow_definition_id' is set
        if ($workflow_definition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_definition_id when calling deleteWorkflowDefinition');
        }
        // parse inputs
        $resourcePath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($workflow_definition_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "workflowDefinitionId", $workflow_definition_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\WorkflowDeleteResponse',
                'aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\WorkflowDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\WorkflowDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkflowDefinition
     *
     * Get Workflow Definition
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     * @param  \DocuSign\Maestro\Api\WorkflowManagementApi\GetWorkflowDefinitionOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\WorkflowDefinitionWithId
     */
    public function getWorkflowDefinition($account_id, $workflow_definition_id, \DocuSign\Maestro\Api\WorkflowManagementApi\GetWorkflowDefinitionOptions $options = null)
    {
        list($response) = $this->getWorkflowDefinitionWithHttpInfo($account_id, $workflow_definition_id, $options);
        return $response;
    }

    /**
     * Operation getWorkflowDefinitionWithHttpInfo
     *
     * Get Workflow Definition
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     * @param  \DocuSign\Maestro\Api\WorkflowManagementApi\GetWorkflowDefinitionOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\WorkflowDefinitionWithId, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowDefinitionWithHttpInfo($account_id, $workflow_definition_id, \DocuSign\Maestro\Api\WorkflowManagementApi\GetWorkflowDefinitionOptions $options = null): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getWorkflowDefinition');
        }
        // verify the required parameter 'workflow_definition_id' is set
        if ($workflow_definition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_definition_id when calling getWorkflowDefinition');
        }
        // parse inputs
        $resourcePath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getLastDeployedId() != 'null') {
                $queryParams['lastDeployedId'] = $this->apiClient->getSerializer()->toQueryValue($options->getLastDeployedId());
            }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($workflow_definition_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "workflowDefinitionId", $workflow_definition_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\WorkflowDefinitionWithId',
                'aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\WorkflowDefinitionWithId', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\WorkflowDefinitionWithId', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkflowDefinitionConfigInstances
     *
     * Gets configuration instances
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\GetConfigurationInstancesResponse
     */
    public function getWorkflowDefinitionConfigInstances($account_id, $workflow_definition_id)
    {
        list($response) = $this->getWorkflowDefinitionConfigInstancesWithHttpInfo($account_id, $workflow_definition_id);
        return $response;
    }

    /**
     * Operation getWorkflowDefinitionConfigInstancesWithHttpInfo
     *
     * Gets configuration instances
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\GetConfigurationInstancesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowDefinitionConfigInstancesWithHttpInfo($account_id, $workflow_definition_id): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getWorkflowDefinitionConfigInstances');
        }
        // verify the required parameter 'workflow_definition_id' is set
        if ($workflow_definition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_definition_id when calling getWorkflowDefinitionConfigInstances');
        }
        // parse inputs
        $resourcePath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($workflow_definition_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "workflowDefinitionId", $workflow_definition_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\GetConfigurationInstancesResponse',
                'aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\GetConfigurationInstancesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\GetConfigurationInstancesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkflowDefinitions
     *
     * Get Workflow Definitions metadata
     *
     * @param ?string $account_id Account ID
     * @param  \DocuSign\Maestro\Api\WorkflowManagementApi\GetWorkflowDefinitionsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\WorkflowDefinitionList
     */
    public function getWorkflowDefinitions($account_id, \DocuSign\Maestro\Api\WorkflowManagementApi\GetWorkflowDefinitionsOptions $options = null)
    {
        list($response) = $this->getWorkflowDefinitionsWithHttpInfo($account_id, $options);
        return $response;
    }

    /**
     * Operation getWorkflowDefinitionsWithHttpInfo
     *
     * Get Workflow Definitions metadata
     *
     * @param ?string $account_id Account ID
     * @param  \DocuSign\Maestro\Api\WorkflowManagementApi\GetWorkflowDefinitionsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\WorkflowDefinitionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowDefinitionsWithHttpInfo($account_id, \DocuSign\Maestro\Api\WorkflowManagementApi\GetWorkflowDefinitionsOptions $options = null): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getWorkflowDefinitions');
        }
        // parse inputs
        $resourcePath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getStatus() != 'null') {
                $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($options->getStatus());
            }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\WorkflowDefinitionList',
                'aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\WorkflowDefinitionList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\WorkflowDefinitionList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation publishOrUnPublishWorkflowDefinition
     *
     * Publishes or unpublishes a workflow definition.
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     * @param \DocuSign\Maestro\Model\DeployRequest $body Request Body to publish or unpublish a workflow definition. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\DeployResponse
     */
    public function publishOrUnPublishWorkflowDefinition($account_id, $workflow_definition_id, $body)
    {
        list($response) = $this->publishOrUnPublishWorkflowDefinitionWithHttpInfo($account_id, $workflow_definition_id, $body);
        return $response;
    }

    /**
     * Operation publishOrUnPublishWorkflowDefinitionWithHttpInfo
     *
     * Publishes or unpublishes a workflow definition.
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     * @param \DocuSign\Maestro\Model\DeployRequest $body Request Body to publish or unpublish a workflow definition. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\DeployResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishOrUnPublishWorkflowDefinitionWithHttpInfo($account_id, $workflow_definition_id, $body): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling publishOrUnPublishWorkflowDefinition');
        }
        // verify the required parameter 'workflow_definition_id' is set
        if ($workflow_definition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_definition_id when calling publishOrUnPublishWorkflowDefinition');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling publishOrUnPublishWorkflowDefinition');
        }
        // parse inputs
        $resourcePath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/publish";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($workflow_definition_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "workflowDefinitionId", $workflow_definition_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\DeployResponse',
                'aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/publish'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\DeployResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\DeployResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\InvalidWorkflowResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkflowDefinition
     *
     * Updates a workflow definition.
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     * @param \DocuSign\Maestro\Model\CreateOrUpdateWorkflowDefinitionRequestBody $body Request Body to update a workflow definition. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse
     */
    public function updateWorkflowDefinition($account_id, $workflow_definition_id, $body)
    {
        list($response) = $this->updateWorkflowDefinitionWithHttpInfo($account_id, $workflow_definition_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkflowDefinitionWithHttpInfo
     *
     * Updates a workflow definition.
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     * @param \DocuSign\Maestro\Model\CreateOrUpdateWorkflowDefinitionRequestBody $body Request Body to update a workflow definition. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkflowDefinitionWithHttpInfo($account_id, $workflow_definition_id, $body): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateWorkflowDefinition');
        }
        // verify the required parameter 'workflow_definition_id' is set
        if ($workflow_definition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_definition_id when calling updateWorkflowDefinition');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkflowDefinition');
        }
        // parse inputs
        $resourcePath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($workflow_definition_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "workflowDefinitionId", $workflow_definition_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse',
                'aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\NewOrUpdatedWorkflowDefinitionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
