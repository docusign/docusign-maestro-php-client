<?php
declare(strict_types=1);

/**
 * WorkflowInstanceManagementApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Maestro\Api\WorkflowInstanceManagementApi;



namespace DocuSign\Maestro\Api;

use DocuSign\Maestro\Client\ApiClient;
use DocuSign\Maestro\Client\ApiException;
use DocuSign\Maestro\Configuration;
use DocuSign\Maestro\ObjectSerializer;

/**
 * WorkflowInstanceManagementApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Maestro
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkflowInstanceManagementApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation cancelWorkflowInstance
     *
     * Cancels a running workflow instance.
     *
     * @param ?string $account_id Account ID
     * @param ?string $instance_id DS Workflow Instance Id (dacId)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\CancelResponse
     */
    public function cancelWorkflowInstance($account_id, $instance_id)
    {
        list($response) = $this->cancelWorkflowInstanceWithHttpInfo($account_id, $instance_id);
        return $response;
    }

    /**
     * Operation cancelWorkflowInstanceWithHttpInfo
     *
     * Cancels a running workflow instance.
     *
     * @param ?string $account_id Account ID
     * @param ?string $instance_id DS Workflow Instance Id (dacId)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\CancelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelWorkflowInstanceWithHttpInfo($account_id, $instance_id): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling cancelWorkflowInstance');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling cancelWorkflowInstance');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/management/instances/{instanceId}/cancel";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "instanceId", $instance_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\CancelResponse',
                '/v1/accounts/{accountId}/management/instances/{instanceId}/cancel'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\CancelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\CancelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkflowHistory
     *
     * Get List of Step Histories
     *
     * @param ?string $account_id Account ID
     * @param ?string $instance_id DS Workflow Instance Id (dacId)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\WorkflowStepHistory[]
     */
    public function getWorkflowHistory($account_id, $instance_id)
    {
        list($response) = $this->getWorkflowHistoryWithHttpInfo($account_id, $instance_id);
        return $response;
    }

    /**
     * Operation getWorkflowHistoryWithHttpInfo
     *
     * Get List of Step Histories
     *
     * @param ?string $account_id Account ID
     * @param ?string $instance_id DS Workflow Instance Id (dacId)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\WorkflowStepHistory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowHistoryWithHttpInfo($account_id, $instance_id): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getWorkflowHistory');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling getWorkflowHistory');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/management/instances/{instanceId}/history";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "instanceId", $instance_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\WorkflowStepHistory[]',
                '/v1/accounts/{accountId}/management/instances/{instanceId}/history'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\WorkflowStepHistory[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\WorkflowStepHistory[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkflowInstance
     *
     * Get Workflow Instance Details
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     * @param ?string $instance_id DS Workflow Instance Id (dacId)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\WorkflowInstance
     */
    public function getWorkflowInstance($account_id, $workflow_definition_id, $instance_id)
    {
        list($response) = $this->getWorkflowInstanceWithHttpInfo($account_id, $workflow_definition_id, $instance_id);
        return $response;
    }

    /**
     * Operation getWorkflowInstanceWithHttpInfo
     *
     * Get Workflow Instance Details
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     * @param ?string $instance_id DS Workflow Instance Id (dacId)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\WorkflowInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowInstanceWithHttpInfo($account_id, $workflow_definition_id, $instance_id): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getWorkflowInstance');
        }
        // verify the required parameter 'workflow_definition_id' is set
        if ($workflow_definition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_definition_id when calling getWorkflowInstance');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling getWorkflowInstance');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances/{instanceId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($workflow_definition_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "workflowDefinitionId", $workflow_definition_id);
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "instanceId", $instance_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\WorkflowInstance',
                '/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances/{instanceId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\WorkflowInstance', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\WorkflowInstance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkflowInstances
     *
     * Get List of Workflow Instances
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Maestro\Model\WorkflowInstance[]
     */
    public function getWorkflowInstances($account_id, $workflow_definition_id)
    {
        list($response) = $this->getWorkflowInstancesWithHttpInfo($account_id, $workflow_definition_id);
        return $response;
    }

    /**
     * Operation getWorkflowInstancesWithHttpInfo
     *
     * Get List of Workflow Instances
     *
     * @param ?string $account_id Account ID
     * @param ?string $workflow_definition_id Workflow Definition ID
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Maestro\Model\WorkflowInstance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowInstancesWithHttpInfo($account_id, $workflow_definition_id): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getWorkflowInstances');
        }
        // verify the required parameter 'workflow_definition_id' is set
        if ($workflow_definition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_definition_id when calling getWorkflowInstances');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($workflow_definition_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "workflowDefinitionId", $workflow_definition_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Maestro\Model\WorkflowInstance[]',
                '/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Maestro\Model\WorkflowInstance[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\WorkflowInstance[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Maestro\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
